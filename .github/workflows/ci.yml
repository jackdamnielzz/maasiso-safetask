name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Lint and Type Check
  lint:
    runs-on: ubuntu-latest
    name: Lint & Type Check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            web/package-lock.json

      - name: Install root dependencies
        run: npm ci

      - name: Install web dependencies
        run: |
          cd web
          npm ci

      - name: Run ESLint
        run: |
          cd web
          npm run lint

      - name: Run TypeScript type check
        run: |
          cd web
          npx tsc --noEmit

      - name: Check Prettier formatting
        run: |
          cd web
          npm run format:check

  # Unit Tests with Coverage
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests & Coverage
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Setup Firebase emulators
        run: |
          cd web
          npm install -g firebase-tools
          firebase --version

      - name: Run Jest unit tests with coverage
        run: |
          cd web
          npm run test:ci
        env:
          CI: true

      - name: Upload Jest coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./web/coverage/lcov.info
          flags: unit
          name: jest-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Jest coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: jest-coverage-report
          path: |
            web/coverage/
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.4.0
        with:
          lcov-file: ./web/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          delete-old-comments: true

  # E2E Tests with Coverage
  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests & Coverage
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Setup Firefox
        uses: browser-actions/setup-firefox@latest

      - name: Setup Firebase emulators
        run: |
          cd web
          npm install -g firebase-tools

      - name: Build Next.js application
        run: |
          cd web
          npm run build

      - name: Run Cypress E2E tests with coverage
        run: |
          cd web
          npm run emulators:e2e
        env:
          CI: true
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Upload Cypress coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./web/coverage/lcov.info
          flags: e2e
          name: cypress-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Cypress test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: web/cypress/screenshots
          retention-days: 7

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos
          path: web/cypress/videos
          retention-days: 7

  # Build and Deploy Check
  build:
    runs-on: ubuntu-latest
    name: Build Check
    needs: [lint, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Build application
        run: |
          cd web
          npm run build
        env:
          CI: true
          SKIP_ENV_VALIDATION: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: |
            web/.next/
          retention-days: 1

  # Coverage Summary and Badge Generation  
  coverage-summary:
    runs-on: ubuntu-latest
    name: Coverage Summary
    needs: [unit-tests, e2e-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Jest coverage report
        uses: actions/download-artifact@v4
        with:
          name: jest-coverage-report
          path: coverage/

      - name: Generate coverage badge
        uses: jaywcjlove/coverage-badges-cli@main
        if: github.ref == 'refs/heads/main'
        with:
          source: coverage/coverage-summary.json
          output: coverage-badge.svg

      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main'
        with:
          name: coverage-badge
          path: coverage-badge.svg
          retention-days: 90

      - name: Coverage Summary Comment
        if: github.event_name == 'pull_request'
        run: |
          echo "## 📊 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "coverage/coverage-summary.json" ]; then
            node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              console.log('| Metric | Coverage | Status |');
              console.log('|--------|----------|--------|');
              console.log('| Lines | ' + total.lines.pct + '% | ' + (total.lines.pct >= 80 ? '✅' : '❌') + ' |');
              console.log('| Functions | ' + total.functions.pct + '% | ' + (total.functions.pct >= 80 ? '✅' : '❌') + ' |');
              console.log('| Branches | ' + total.branches.pct + '% | ' + (total.branches.pct >= 80 ? '✅' : '❌') + ' |');
              console.log('| Statements | ' + total.statements.pct + '% | ' + (total.statements.pct >= 80 ? '✅' : '❌') + ' |');
            " >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage report not found" >> $GITHUB_STEP_SUMMARY
          fi

  # Security Audit
  security:
    runs-on: ubuntu-latest
    name: Security Audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            web/package-lock.json

      - name: Audit root dependencies
        run: npm audit --audit-level=high

      - name: Audit web dependencies
        run: |
          cd web
          npm audit --audit-level=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    name: Quality Gates
    needs: [lint, unit-tests, e2e-tests, build, security]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Lint checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "⚠️  Security audit has issues"
            # Don't fail on security for now, just warn
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "⚠️  E2E tests failed"
            # Don't fail on E2E for now as they might be flaky
          fi
          
          echo "✅ Quality gates passed"

      - name: Update quality status
        if: github.ref == 'refs/heads/main'
        run: |
          echo "## ✅ All Quality Gates Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linting and formatting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TypeScript type checking" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests with 80%+ coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build successful" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security audit passed" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "- ✅ E2E tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️  E2E tests need attention" >> $GITHUB_STEP_SUMMARY
          fi